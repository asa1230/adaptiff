{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["apply","meshline","colors","Fatline","material","useRef","_useState","useState","_useState2","Object","slicedToArray","version","setVersion","_useState3","parseInt","length","Math","random","pickedColorIndex","pickedColor","_useState5","ratio","_useState7","max","width","_useState9","pos","THREE","Array","fill","map","add","clone","curve","useEffect","setColorsFromGlobal","event","data","payload","palette","window","addEventListener","removeEventListener","useRender","current","uniforms","dashOffset","value","react_default","a","createElement","onUpdate","self","parent","geometry","setGeometry","args","vertices","getPoints","attach","ref","transparent","depthTest","lineWidth","color","dashArray","dashRatio","numLines","Scene","group","theta","rotation","set","sin","degToRad","lines","_","index","key","Background","_useState11","_useState12","backgroundColor","setBackgroundColor","handleMessageEvent","type","style","position","left","top","bottom","right","capturedImage","fov","App","_useState13","_useState14","isPaused","setIsPaused","_useState15","_useState16","document","querySelector","toDataURL","canvas","pausedImage","src","postMessage","image","className","id","alt","dist","camera","gl","preserveDrawingBuffer","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07e80179.chunk.js","sourcesContent":["import * as THREE from \"three\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { apply, Canvas, useRender } from \"react-three-fiber\";\nimport * as meshline from \"three.meshline\";\nimport \"./App.css\";\napply(meshline);\n\nlet colors = [\"#A2CCB6\", \"#FCEEB5\", \"#ffffff\", \"#EE786E\"];\nfunction Fatline() {\n  const material = useRef();\n  const [version, setVersion] = useState(0);\n  const [pickedColorIndex] = useState(() =>\n    parseInt(colors.length * Math.random())\n  );\n  const pickedColor = colors[pickedColorIndex];\n  const [ratio] = useState(() => 0.5 + 0.5 * Math.random());\n  const [width] = useState(() => Math.max(0.1, 0.3 * Math.random()));\n  // Calculate wiggly curve\n  const [curve] = useState(() => {\n    let pos = new THREE.Vector3(\n      30 - 60 * Math.random(),\n      -5,\n      10 - 20 * Math.random()\n    );\n    return new Array(30)\n      .fill()\n      .map(() =>\n        pos\n          .add(\n            new THREE.Vector3(\n              2 - Math.random() * 4,\n              4 - Math.random() * 2,\n              5 - Math.random() * 10\n            )\n          )\n          .clone()\n      );\n  });\n  useEffect(() => {\n    const setColorsFromGlobal = event => {\n      if (event.data.payload && event.data.payload.palette) {\n        colors = event.data.payload.palette;\n        setVersion(version + 1);\n      }\n    };\n    window.addEventListener(\"message\", setColorsFromGlobal);\n    return () => window.removeEventListener(\"message\", setColorsFromGlobal);\n  }, [version]);\n  // Hook into the render loop and decrease the materials dash-offset\n  useRender(() => {\n    if (material && material.current) {\n      material.current.uniforms.dashOffset.value -= 0.0005;\n    }\n  });\n  return (\n    <mesh>\n      {/** MeshLine and CMRCurve are a OOP factories, not scene objects, hence all the imperative code in here :-( */}\n      <meshLine onUpdate={self => (self.parent.geometry = self.geometry)}>\n        <geometry onUpdate={self => self.parent.setGeometry(self)}>\n          <catmullRomCurve3\n            args={[curve]}\n            onUpdate={self => (self.parent.vertices = self.getPoints(500))}\n          />\n        </geometry>\n      </meshLine>\n      {/** MeshLineMaterial on the other hand is a regular material, so we can just attach it */}\n      <meshLineMaterial\n        attach=\"material\"\n        ref={material}\n        transparent\n        depthTest={false}\n        lineWidth={width}\n        color={pickedColor}\n        dashArray={0.1}\n        dashRatio={ratio}\n      />\n    </mesh>\n  );\n}\n\nlet numLines = 10;\nfunction Scene() {\n  let group = useRef();\n  let theta = 0;\n  // Hook into the render loop and rotate the scene a bit\n  useRender(() => {\n    if (group && group.current) {\n      group.current.rotation.set(\n        0,\n        5 * Math.sin(THREE.Math.degToRad((theta += 0.02))),\n        0\n      );\n    }\n  });\n  const lines = new Array(numLines).fill();\n  return (\n    <group ref={group}>\n      {lines.map((_, index) => (\n        <Fatline key={index} />\n      ))}\n    </group>\n  );\n}\n\nfunction Background() {\n  const [backgroundColor, setBackgroundColor] = useState(\"#324444\");\n  useEffect(() => {\n    const handleMessageEvent = function(event) {\n      if (event.data.type === \"render\") {\n        if (backgroundColor !== event.data.payload.backgroundColor) {\n          setBackgroundColor(event.data.payload.backgroundColor);\n        }\n        return;\n      }\n    };\n    window.addEventListener(\"message\", handleMessageEvent);\n    return () => window.removeEventListener(\"message\", handleMessageEvent);\n  }, [backgroundColor]);\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        bottom: 0,\n        right: 0,\n        backgroundColor\n      }}\n    />\n  );\n}\n\nlet fov = 75;\nlet capturedImage;\nfunction App() {\n  const [isPaused, setIsPaused] = useState(false);\n  const [version, setVersion] = useState(0);\n  useEffect(() => {\n    const handleMessageEvent = function(event) {\n      if (event.data.type === \"pause\") {\n        capturedImage = document\n          .querySelector(\"#canvas-wrapper > canvas\")\n          .toDataURL(\"image/png\");\n        setIsPaused(true);\n        return;\n      }\n      if (event.data.type === \"unpause\") {\n        setIsPaused(false);\n        return;\n      }\n      if (event.data.type === \"download\") {\n        const canvas = document.querySelector(\"#canvas-wrapper > canvas\");\n        const pausedImage = document.querySelector(\"#paused-image\");\n        capturedImage = canvas\n          ? canvas.toDataURL(\"image/png\")\n          : pausedImage.src;\n        window.parent.postMessage(\n          { type: \"download\", image: capturedImage },\n          \"*\"\n        );\n        return;\n      }\n      if (event.data.type !== \"render\") {\n        return;\n      }\n      const { payload } = event.data;\n      if (numLines === payload.numLines && fov === payload.fov) {\n        return;\n      }\n      numLines = payload.numLines;\n      colors = payload.palette;\n      fov = payload.fov;\n      setVersion(version + 1);\n      return;\n    };\n    window.addEventListener(\"message\", handleMessageEvent);\n    return () => window.removeEventListener(\"message\", handleMessageEvent);\n  }, [version]);\n  if (numLines === null) {\n    return null;\n  }\n  if (isPaused) {\n    return (\n      <div className=\"main\">\n        <Background />\n        <img\n          style={{ position: \"relative\" }}\n          id=\"paused-image\"\n          alt=\"\"\n          className=\"main\"\n          src={capturedImage}\n        />\n      </div>\n    );\n  }\n  return (\n    <div className=\"main\">\n      <Background />\n      <Canvas\n        className=\"main\"\n        id=\"canvas-wrapper\"\n        style={{ position: \"relative\" }}\n        key={version}\n        camera={{ position: [0, 50, 10], fov }}\n        gl={{ preserveDrawingBuffer: true }}\n      >\n        <Scene />\n      </Canvas>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}