{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["IndexPage","state","line","complexity","randomValues","Array","fill","map","Math","random","minRadius","radius","palette","angle","contrast","url","mounted","bypassAnimation","onWindowMessage","event","data","type","_event$data$payload","payload","_this","setState","updateShape","window","parent","postMessage","image","imageType","generateShape","fullCircle","props","lineRadial","d","i","curve","curveBasisClosed","custom","color","sampleData","index","floor","newLine","generateDownloadUrl","updateColor","hex","updateComplexity","val","updateContrast","width","innerWidth","height","innerHeight","_this$state","svgTree","concat","encodeURIComponent","this","addEventListener","removeEventListener","_this$state2","react_default","a","createElement","Fragment","viewBox","xmlns","id","gradientTransform","class","offset","stop-color","transform","Component","defaultProps","PI","Boolean","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb97048f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { lineRadial, curveBasisClosed } from \"d3-shape\";\n\nfunction roundPath(path, precision) {\n  if (!path) return;\n  const query = /[\\d\\.-][\\d\\.e-]*/g;\n  return path.replace(\n    query,\n    n => Math.round(n * (1 / precision)) / (1 / precision)\n  );\n}\n\nclass IndexPage extends Component {\n  state = {\n    line:\n      \"M119,-75C163,-41,212,9,204,48C196,86,132,113,79,123C25,133,-16,127,-58,111C-99,94,-140,68,-162,22C-184,-24,-188,-89,-158,-119C-128,-150,-64,-147,-13,-137C38,-126,76,-109,119,-75Z\",\n    complexity: 10,\n    randomValues: Array(10)\n      .fill()\n      .map(() => Math.random()),\n    minRadius: 120,\n    radius: 300,\n    palette: [\"gold\", \"red\"],\n    angle: 110,\n    contrast: 0.5,\n    url: \"\",\n    mounted: false,\n    bypassAnimation: false\n  };\n  static defaultProps = {\n    width: 600,\n    height: 600,\n    fullCircle: 2 * Math.PI\n  };\n  componentDidMount() {\n    this.setState({ mounted: true });\n    this.updateShape();\n    window.addEventListener(\"message\", this.onWindowMessage);\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"message\", this.onWindowMessage);\n  }\n  onWindowMessage = event => {\n    if (event.data.type === \"render\") {\n      const {\n        complexity,\n        palette,\n        angle,\n        contrast,\n        randomValues\n      } = event.data.payload;\n      this.setState({\n        complexity,\n        palette,\n        angle,\n        randomValues,\n        minRadius: this.state.radius * (1 - contrast / 10)\n      });\n      this.updateShape();\n    } else if (event.data.type === \"download\") {\n      window.parent.postMessage(\n        { type: \"download\", image: this.state.url, imageType: \"svg\" },\n        \"*\"\n      );\n    }\n  };\n  generateShape = complexity => {\n    const { fullCircle } = this.props;\n    return lineRadial()\n      .radius(d => d.radius)\n      .angle((d, i) => (fullCircle / complexity) * i)\n      .curve(curveBasisClosed);\n  };\n  updateShape = custom => {\n    const { radius } = this.state;\n\n    const bypassAnimation = custom\n      ? custom.complexity !== this.state.complexity\n      : false;\n\n    const minRadius = custom ? custom.minRadius : this.state.minRadius;\n    const contrast = custom ? custom.contrast : this.state.contrast;\n    const complexity = custom ? custom.complexity : this.state.complexity;\n    const color = custom ? custom.color : this.state.color;\n\n    const sampleData = Array(complexity)\n      .fill()\n      .map((complexity, index) => ({\n        radius:\n          minRadius +\n          Math.floor(\n            (this.state.randomValues[index] || 1) * (radius - minRadius)\n          )\n      }));\n\n    const newLine = this.generateShape(complexity)(sampleData) + \"Z\";\n\n    const url = this.generateDownloadUrl(newLine);\n\n    this.setState(\n      {\n        contrast,\n        minRadius,\n        complexity,\n        color,\n        line: newLine,\n        bypassAnimation,\n        url\n      },\n      () => {\n        this.setState({ bypassAnimation: false });\n      }\n    );\n  };\n  updateColor = color => {\n    this.setState({\n      color: color.hex,\n      url: this.generateDownloadUrl(this.state.line)\n    });\n  };\n  updateComplexity = val => {\n    this.updateShape({\n      contrast: this.state.contrast,\n      minRadius: this.state.minRadius,\n      complexity: val,\n      color: this.state.color\n    });\n  };\n  updateContrast = val => {\n    this.updateShape({\n      contrast: val,\n      minRadius: this.state.radius * (1 - val),\n      complexity: this.state.complexity,\n      color: this.state.color\n    });\n  };\n  generateDownloadUrl = newLine => {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    const { palette, angle } = this.state;\n\n    const svgTree = `<?xml version=\"1.0\" standalone=\"no\"?>\n    <svg\n    width=\"${width}\"\n    height=\"${height}\"\n    viewBox=\"0 0 600 600\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <linearGradient id=\"Gradient1\" gradientTransform=\"rotate(${angle})\">\n      <stop class=\"stop1\" offset=\"0%\" stop-color=\"${palette[0]}\"></stop>      \n      <stop class=\"stop2\" offset=\"100%\" stop-color=\"${palette[1]}\"></stop>\n    </linearGradient>\n    <g transform=\"translate(${width / 2},${height / 2})\">\n      <path d=\"${newLine}\" fill=\"url('#Gradient1')\" />\n    </g>\n  </svg>`;\n\n    return \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent(svgTree);\n  };\n  render() {\n    const { line, palette, angle } = this.state;\n\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    return (\n      <>\n        <svg\n          width={width}\n          height={height}\n          viewBox={`0 0 570 570`}\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <linearGradient id=\"Gradient1\" gradientTransform={`rotate(${angle})`}>\n            <stop class=\"stop1\" offset=\"0%\" stop-color={palette[0]} />\n            <stop class=\"stop2\" offset=\"100%\" stop-color={palette[1]} />\n          </linearGradient>\n          <g transform={`translate(285,285)`}>\n            <path d={`${line}`} fill=\"url('#Gradient1')\" />\n          </g>\n        </svg>\n      </>\n    );\n  }\n}\n\nexport default IndexPage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}