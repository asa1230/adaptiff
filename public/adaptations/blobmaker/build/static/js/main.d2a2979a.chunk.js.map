{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["IndexPage","state","line","complexity","minRadius","radius","palette","contrast","url","mounted","bypassAnimation","onWindowMessage","event","data","type","_event$data$payload","payload","_this","setState","updateShape","generateShape","fullCircle","props","lineRadial","d","angle","i","curve","curveBasisClosed","custom","color","sampleData","Array","fill","map","Math","floor","random","newLine","generateDownloadUrl","updateColor","hex","updateComplexity","val","updateContrast","_this$props","width","height","svgTree","concat","path","precision","replace","n","round","roundPath","encodeURIComponent","this","window","addEventListener","removeEventListener","_this$state","innerWidth","innerHeight","react_default","a","createElement","Fragment","viewBox","xmlns","id","gradientTransform","class","offset","stop-color","transform","Component","defaultProps","PI","Boolean","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2a2979a.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport { lineRadial, curveBasisClosed } from \"d3-shape\"\n\nfunction roundPath(path, precision) {\n  if (!path) return\n  const query = /[\\d\\.-][\\d\\.e-]*/g\n  return path.replace(query, n => Math.round(n * (1/precision)) / (1/precision))\n}\n\nclass IndexPage extends Component {\n  state = {\n    line: \"M119,-75C163,-41,212,9,204,48C196,86,132,113,79,123C25,133,-16,127,-58,111C-99,94,-140,68,-162,22C-184,-24,-188,-89,-158,-119C-128,-150,-64,-147,-13,-137C38,-126,76,-109,119,-75Z\",\n    complexity: 7,\n    minRadius: 120,\n    radius: 300,\n    palette: ['gold', 'red'],\n    contrast: 0.6,\n    url: \"\",\n    mounted: false,\n    bypassAnimation: false,\n  }\n  static defaultProps = {\n    width: 600,\n    height: 600,\n    fullCircle: 2 * Math.PI,\n  }\n  componentDidMount() {\n    this.setState({ mounted: true })\n    this.updateShape()\n    window.addEventListener('message', this.onWindowMessage)\n  }\n  componentWillUnmount() {\n    window.removeEventListener('message', this.onWindowMessage)\n  }\n  onWindowMessage = (event) => {\n    if (event.data.type === 'render') {\n      const { complexity, palette, contrast } = event.data.payload;\n      this.setState({\n        complexity,\n        palette,\n        minRadius: this.state.radius * (1 - contrast / 10),\n      })\n      this.updateShape()\n    }\n  }\n  generateShape = complexity => {\n    const { fullCircle } = this.props\n    return lineRadial()\n      .radius(d => d.radius)\n      .angle((d, i) => (fullCircle / complexity) * i)\n      .curve(curveBasisClosed)\n  }\n  updateShape = custom => {\n    const { radius } = this.state\n\n    const bypassAnimation = custom\n      ? custom.complexity !== this.state.complexity\n      : false\n\n    const minRadius = custom\n      ? custom.minRadius : this.state.minRadius\n    const contrast = custom\n      ? custom.contrast : this.state.contrast\n    const complexity = custom\n      ? custom.complexity : this.state.complexity\n    const color = custom\n      ? custom.color : this.state.color\n\n    const sampleData = Array(complexity)\n      .fill()\n      .map(() => ({\n        radius: minRadius + Math.floor(Math.random() * (radius - minRadius)),\n      }))\n    \n    const newLine = this.generateShape(complexity)(sampleData) + \"Z\"\n\n    const url = this.generateDownloadUrl(newLine, color)\n\n    this.setState({\n      contrast,\n      minRadius,\n      complexity,\n      color,\n      line: newLine,\n      bypassAnimation,\n      url,\n    }, () => {\n      this.setState({ bypassAnimation: false })\n    })\n  }\n  updateColor = color => {\n    this.setState({\n      color: color.hex,\n      url: this.generateDownloadUrl(this.state.line, color.hex),\n    })\n  }\n  updateComplexity = val => {\n    this.updateShape({\n      contrast: this.state.contrast,\n      minRadius: this.state.minRadius,\n      complexity: val,\n      color: this.state.color,\n    })\n  }\n  updateContrast = val => {\n    this.updateShape({\n      contrast: val,\n      minRadius: this.state.radius * (1 - val),\n      complexity: this.state.complexity,\n      color: this.state.color,\n    })\n  }\n  generateDownloadUrl = (newLine, color) => {\n    const { width, height } = this.props\n\n    const svgTree = `<?xml version=\"1.0\" standalone=\"no\"?>\n<svg\n  width=\"${width}\"\n  height=\"${height}\"\n  viewBox=\"0 0 600 600\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n>\n  <g transform=\"translate(${width / 2},${height / 2})\">\n    <path d=\"${roundPath(newLine, 0.1)}\" fill=\"${color}\" />\n  </g>\n</svg>\n    `\n\n    return \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent(svgTree)\n  }\n  render() {\n    const { line, palette } = this.state\n\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    return (\n      <>\n          <svg\n            width={width}\n            height={height}\n            viewBox={`0 0 ${width} ${height}`}\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <linearGradient id=\"Gradient1\" gradientTransform=\"rotate(110)\">\n              <stop class=\"stop1\" offset=\"0%\" stop-color={palette[0]}></stop>      \n              <stop class=\"stop2\" offset=\"100%\" stop-color={palette[1]}></stop>\n            </linearGradient>\n            <g transform={`translate(${width / 2},${height / 2})`}>\n              <path d={`${line}`} fill=\"url('#Gradient1')\" />\n            </g>\n          </svg>\n      </>\n    )\n  }\n}\n\nexport default IndexPage","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}