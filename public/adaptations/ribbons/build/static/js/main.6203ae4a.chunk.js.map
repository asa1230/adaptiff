{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["apply","meshline","colors","Fatline","material","useRef","_useState","useState","parseInt","length","Math","random","pickedColorIndex","Object","slicedToArray","pickedColor","_useState3","ratio","_useState5","max","width","_useState7","pos","THREE","Array","fill","map","add","clone","curve","useRender","current","uniforms","dashOffset","value","react_default","a","createElement","onUpdate","self","parent","geometry","setGeometry","args","vertices","getPoints","attach","ref","transparent","depthTest","lineWidth","color","dashArray","dashRatio","numLines","Scene","group","theta","rotation","set","sin","degToRad","lines","_","index","key","backgroundColor","fov","App","_useState9","_useState10","invalidateFrameloop","setInvalidateFrameloop","_useState11","_useState12","version","setVersion","useEffect","setColorsFromGlobal","event","data","type","payload","palette","html2canvas","this","captureFrameRef","scale","then","canvas","image","toDataURL","window","postMessage","addEventListener","removeEventListener","style","height","dist","background","camera","position","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6203ae4a.chunk.js","sourcesContent":["import * as THREE from 'three'\nimport React, { useState, useEffect, useRef } from 'react'\nimport { apply, Canvas, useRender } from 'react-three-fiber'\nimport * as meshline from 'three.meshline'\nimport html2canvas from \"html2canvas\";\n\napply(meshline)\n\nlet colors = ['#A2CCB6', '#FCEEB5', '#EE786E', '#EE786E'];\nfunction Fatline() {\n  const material = useRef();  \n  // setColors\n  // const [colors] = useState(['#A2CCB6', '#FCEEB5', '#EE786E', '#EE786E']);\n  const [pickedColorIndex] = useState(() => parseInt(colors.length * Math.random()));\n  const pickedColor = colors[pickedColorIndex];\n  const [ratio] = useState(() => 0.5 + 0.5 * Math.random())\n  const [width] = useState(() => Math.max(0.1, 0.3 * Math.random()))\n  // Calculate wiggly curve\n  const [curve] = useState(() => {\n    let pos = new THREE.Vector3(30 - 60 * Math.random(), -5, 10 - 20 * Math.random())\n    return new Array(30).fill().map(() => pos.add(new THREE.Vector3(2 - Math.random() * 4, 4 - Math.random() * 2, 5 - Math.random() * 10)).clone())\n  })\n  // useEffect(() => {\n  //   const setColorsFromGlobal = function(event) {\n  //     if (event.data.type !== \"render\") {\n  //       return;\n  //     }\n  //     setColors(event.data.payload.palette);\n  //   };\n  //   window.addEventListener('message', setColorsFromGlobal);\n  //   return() => window.removeEventListener('message', setColorsFromGlobal);\n  // }, []);\n  // Hook into the render loop and decrease the materials dash-offset\n  useRender(() => {\n    if (material && material.current) {\n      material.current.uniforms.dashOffset.value -= 0.0005\n    }    \n  })\n  return (\n    <mesh>\n      {/** MeshLine and CMRCurve are a OOP factories, not scene objects, hence all the imperative code in here :-( */}\n      <meshLine onUpdate={self => (self.parent.geometry = self.geometry)}>\n        <geometry onUpdate={self => self.parent.setGeometry(self)}>\n          <catmullRomCurve3 args={[curve]} onUpdate={self => (self.parent.vertices = self.getPoints(500))} />\n        </geometry>\n      </meshLine>\n      {/** MeshLineMaterial on the other hand is a regular material, so we can just attach it */}\n      <meshLineMaterial attach=\"material\" ref={material} transparent depthTest={false} lineWidth={width} color={pickedColor} dashArray={0.1} dashRatio={ratio} />\n    </mesh>\n  )\n}\n\nlet numLines = 100\nfunction Scene() {\n  let group = useRef()\n  let theta = 0\n  // Hook into the render loop and rotate the scene a bit\n  useRender(() => {\n    if (group && group.current) {\n      group.current.rotation.set(0, 5 * Math.sin(THREE.Math.degToRad((theta += 0.02))), 0)\n    }    \n  })  \n  const lines = new Array(numLines).fill()\n  return (\n    <group ref={group}>\n      {lines.map((_, index) => (\n        <Fatline key={index} />\n      ))}\n    </group>\n  )\n}\n\nlet backgroundColor = '#fff'\nlet fov = 75\nfunction App() {\n  const [invalidateFrameloop, setInvalidateFrameloop] = useState(false);\n  const [version, setVersion] = useState(0);\n  useEffect(() => {\n    const setColorsFromGlobal = function(event) {\n      if (event.data.type === \"pause\") {\n        setInvalidateFrameloop(true);\n        return;\n      }\n      if (event.data.type === \"unpause\") {\n        setInvalidateFrameloop(false);\n        return;\n      }\n      if (event.data.type === \"download\") {\n        html2canvas(this.captureFrameRef.current, { scale: 2 }).then(canvas => {\n          var image = canvas.toDataURL(\"image/png\");\n          window.parent.postMessage({ type: \"download\", image }, \"*\");\n        });\n        return;\n      }\n      if (event.data.type !== \"render\") {\n        return;\n      }\n      const {payload} = event.data;\n      colors = payload.palette;\n      numLines = payload.numLines\n      backgroundColor = payload.backgroundColor\n      fov = payload.fov\n      setVersion(version + 1);\n      return;\n    };\n    window.addEventListener('message', setColorsFromGlobal);\n    return() => window.removeEventListener('message', setColorsFromGlobal);\n  }, [version]);\n  if (!backgroundColor) {\n    return null;\n  }\n  return (\n    <div style={{width: '100%', height: '100%'}}>\n      <Canvas key={version} invalidateFrameloop={invalidateFrameloop} style={{ background: backgroundColor }} camera={{ position: [0, 50, 10], fov }}>\n        <Scene />\n      </Canvas>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}