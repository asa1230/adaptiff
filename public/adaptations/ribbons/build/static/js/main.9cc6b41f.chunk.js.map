{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["apply","meshline","colors","Fatline","material","useRef","_useState","useState","_useState2","Object","slicedToArray","version","setVersion","_useState3","parseInt","length","Math","random","pickedColorIndex","pickedColor","_useState5","ratio","_useState7","max","width","_useState9","pos","THREE","Array","fill","map","add","clone","curve","useEffect","setColorsFromGlobal","event","data","payload","palette","window","addEventListener","removeEventListener","useRender","current","uniforms","dashOffset","value","react_default","a","createElement","onUpdate","self","parent","geometry","setGeometry","args","vertices","getPoints","attach","ref","transparent","depthTest","lineWidth","color","dashArray","dashRatio","numLines","Scene","group","theta","rotation","set","sin","degToRad","lines","_","index","key","Background","_useState11","_useState12","backgroundColor","setBackgroundColor","handleMessageEvent","type","style","position","left","top","bottom","right","capturedImage","fov","App","_useState13","_useState14","isPaused","setIsPaused","_useState15","_useState16","document","querySelector","toDataURL","canvas","pausedImage","src","postMessage","image","className","id","alt","dist","camera","gl","preserveDrawingBuffer","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9cc6b41f.chunk.js","sourcesContent":["import * as THREE from 'three'\nimport React, { useState, useEffect, useRef } from 'react'\nimport { apply, Canvas, useRender } from 'react-three-fiber'\nimport * as meshline from 'three.meshline'\nimport './App.css'\napply(meshline)\n\nlet colors = ['#A2CCB6', '#FCEEB5', '#EE786E', '#EE786E'];\nfunction Fatline() {\n  const material = useRef();  \n  const [version, setVersion] = useState(0);\n  const [pickedColorIndex] = useState(() => parseInt(colors.length * Math.random()));\n  const pickedColor = colors[pickedColorIndex];\n  const [ratio] = useState(() => 0.5 + 0.5 * Math.random())\n  const [width] = useState(() => Math.max(0.1, 0.3 * Math.random()))\n  // Calculate wiggly curve\n  const [curve] = useState(() => {\n    let pos = new THREE.Vector3(30 - 60 * Math.random(), -5, 10 - 20 * Math.random())\n    return new Array(30).fill().map(() => pos.add(new THREE.Vector3(2 - Math.random() * 4, 4 - Math.random() * 2, 5 - Math.random() * 10)).clone())\n  })\n  useEffect(() => {\n    const setColorsFromGlobal = (event) => {\n      if (event.data.payload && event.data.payload.palette) {\n        colors = event.data.payload.palette\n        setVersion(version + 1)\n      }\n    }\n    window.addEventListener('message', setColorsFromGlobal);\n    return() => window.removeEventListener('message', setColorsFromGlobal);\n  }, [version]);\n  // Hook into the render loop and decrease the materials dash-offset\n  useRender(() => {\n    if (material && material.current) {\n      material.current.uniforms.dashOffset.value -= 0.0005\n    }    \n  })\n  return (\n    <mesh>\n      {/** MeshLine and CMRCurve are a OOP factories, not scene objects, hence all the imperative code in here :-( */}\n      <meshLine onUpdate={self => (self.parent.geometry = self.geometry)}>\n        <geometry onUpdate={self => self.parent.setGeometry(self)}>\n          <catmullRomCurve3 args={[curve]} onUpdate={self => (self.parent.vertices = self.getPoints(500))} />\n        </geometry>\n      </meshLine>\n      {/** MeshLineMaterial on the other hand is a regular material, so we can just attach it */}\n      <meshLineMaterial attach=\"material\" ref={material} transparent depthTest={false} lineWidth={width} color={pickedColor} dashArray={0.1} dashRatio={ratio} />\n    </mesh>\n  )\n}\n\nlet numLines = 10\nfunction Scene() {\n  let group = useRef()\n  let theta = 0\n  // Hook into the render loop and rotate the scene a bit\n  useRender(() => {\n    if (group && group.current) {\n      group.current.rotation.set(0, 5 * Math.sin(THREE.Math.degToRad((theta += 0.02))), 0)\n    }    \n  })  \n  const lines = new Array(numLines).fill()\n  return (\n    <group ref={group}>\n      {lines.map((_, index) => (\n        <Fatline key={index} />\n      ))}\n    </group>\n  )\n}\n\nfunction Background() {\n  const [backgroundColor, setBackgroundColor] = useState('#324444');\n  useEffect(() => {\n    const handleMessageEvent = function(event) {\n      if (event.data.type === \"render\") {\n        if (backgroundColor !== event.data.payload.backgroundColor) {\n          setBackgroundColor(event.data.payload.backgroundColor);\n        }\n        return;\n      }\n    }\n    window.addEventListener('message', handleMessageEvent);\n    return() => window.removeEventListener('message', handleMessageEvent);\n  }, [backgroundColor]);\n  return <div style={{position: 'absolute', left: 0, top: 0, bottom: 0, right: 0, backgroundColor }} />\n}\n\nlet fov = 75\nlet capturedImage\nfunction App() {\n  const [isPaused, setIsPaused] = useState(false)\n  const [version, setVersion] = useState(0);\n  useEffect(() => {\n    const handleMessageEvent = function(event) {\n      if (event.data.type === 'pause') {\n        capturedImage = document.querySelector('#canvas-wrapper > canvas').toDataURL('image/png')\n        setIsPaused(true)\n        return\n      }\n      if (event.data.type === 'unpause') {\n        setIsPaused(false)\n        return\n      }\n      if (event.data.type === 'download') {\n        const canvas = document.querySelector('#canvas-wrapper > canvas')\n        const pausedImage = document.querySelector('#paused-image')\n        capturedImage = canvas ? canvas.toDataURL('image/png') : pausedImage.src;\n        window.parent.postMessage({ type: 'download', image: capturedImage }, '*')\n        return\n      }\n      if (event.data.type !== \"render\") {\n        return;\n      }\n      const {payload} = event.data;\n      if (numLines === payload.numLines && fov === payload.fov) {\n        return;\n      }\n      numLines = payload.numLines\n      fov = payload.fov\n      setVersion(version + 1);\n      return;\n    };\n    window.addEventListener('message', handleMessageEvent);\n    return() => window.removeEventListener('message', handleMessageEvent);\n  }, [version]);\n  if (numLines === null) {\n    return null;\n  }\n  if (isPaused) {\n    return (\n      <div className=\"main\">\n        <Background />\n        <img style={{position: 'relative'}} id=\"paused-image\" alt=\"\" className=\"main\" src={capturedImage} />\n      </div>\n    )\n  }\n  return (\n    <div className=\"main\">\n      <Background />\n      <Canvas \n        className=\"main\" \n        id=\"canvas-wrapper\" \n        style={{position: 'relative'}}\n        key={version} camera={{ position: [0, 50, 10], fov }}\n        gl={{ preserveDrawingBuffer: true }}\n      >\n        <Scene />\n      </Canvas>      \n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}