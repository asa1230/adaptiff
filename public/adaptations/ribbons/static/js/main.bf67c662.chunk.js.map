{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["apply","meshline","lines","Array","fill","Fatline","material","useRef","_useState","useState","_useState2","Object","slicedToArray","colors","setColors","_useState3","parseInt","length","Math","random","pickedColorIndex","pickedColor","_useState5","ratio","_useState7","max","width","_useState9","pos","THREE","map","add","clone","curve","useEffect","setColorsFromGlobal","event","data","type","payload","window","addEventListener","removeEventListener","useRender","current","uniforms","dashOffset","value","react_default","a","createElement","onUpdate","self","parent","geometry","setGeometry","args","vertices","getPoints","attach","ref","transparent","depthTest","lineWidth","color","dashArray","dashRatio","Scene","group","theta","rotation","set","sin","degToRad","_","index","key","App","_useState11","backgroundColor","style","height","dist","background","camera","position","fov","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf67c662.chunk.js","sourcesContent":["import * as THREE from 'three'\nimport React, { useState, useEffect, useRef } from 'react'\nimport { apply, Canvas, useRender } from 'react-three-fiber'\nimport * as meshline from 'three.meshline'\n\napply(meshline)\n\nconst numLines = 100\nconst lines = new Array(numLines).fill()\n\nfunction Fatline() {\n  const material = useRef();  \n  const [colors, setColors] = useState(['#A2CCB6', '#FCEEB5', '#EE786E', '#EE786E']);\n  const [pickedColorIndex] = useState(() => parseInt(colors.length * Math.random()));\n  const pickedColor = colors[pickedColorIndex];\n  const [ratio] = useState(() => 0.5 + 0.5 * Math.random())\n  const [width] = useState(() => Math.max(0.1, 0.3 * Math.random()))\n  // Calculate wiggly curve\n  const [curve] = useState(() => {\n    let pos = new THREE.Vector3(30 - 60 * Math.random(), -5, 10 - 20 * Math.random())\n    return new Array(30).fill().map(() => pos.add(new THREE.Vector3(2 - Math.random() * 4, 4 - Math.random() * 2, 5 - Math.random() * 10)).clone())\n  })\n  useEffect(() => {\n    const setColorsFromGlobal = function(event) {\n      if (event.data.type !== \"render\") {\n        return;\n      }\n      setColors([event.data.payload]);\n    };\n    window.addEventListener('message', setColorsFromGlobal);\n    return() => window.removeEventListener('message', setColorsFromGlobal);\n  }, []);\n  // Hook into the render loop and decrease the materials dash-offset\n  useRender(() => (material.current.uniforms.dashOffset.value -= 0.0005))\n  return (\n    <mesh>\n      {/** MeshLine and CMRCurve are a OOP factories, not scene objects, hence all the imperative code in here :-( */}\n      <meshLine onUpdate={self => (self.parent.geometry = self.geometry)}>\n        <geometry onUpdate={self => self.parent.setGeometry(self)}>\n          <catmullRomCurve3 args={[curve]} onUpdate={self => (self.parent.vertices = self.getPoints(500))} />\n        </geometry>\n      </meshLine>\n      {/** MeshLineMaterial on the other hand is a regular material, so we can just attach it */}\n      <meshLineMaterial attach=\"material\" ref={material} transparent depthTest={false} lineWidth={width} color={pickedColor} dashArray={0.1} dashRatio={ratio} />\n    </mesh>\n  )\n}\n\nfunction Scene() {\n  let group = useRef()\n  let theta = 0\n  // Hook into the render loop and rotate the scene a bit\n  useRender(() => group.current.rotation.set(0, 5 * Math.sin(THREE.Math.degToRad((theta += 0.02))), 0))\n  return (\n    <group ref={group}>\n      {lines.map((_, index) => (\n        <Fatline key={index} />\n      ))}\n    </group>\n  )\n}\n\nfunction App() {\n  // setBackgroundColor\n  const [backgroundColor] = useState('#324444');\n  window.addEventListener('click', function() {\n    // setBackgroundColor('#0f0');\n  })\n  return (\n    <div style={{width: '100%', height: '100%'}}>\n      <Canvas style={{ background: backgroundColor }} camera={{ position: [0, 50, 10], fov: 75 }}>\n        <Scene />\n      </Canvas>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}